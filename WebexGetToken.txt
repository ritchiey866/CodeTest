Step-by-Step Guide to Generate a Webex Access Token

Step 1: Register Your Integration
Create an Integration:
Go to the Webex Developer Portal and sign in.
Navigate to My Apps and click Create a New App.
Select Integration and fill in the required fields, including the redirect URI, scopes, and permissions your application needs.
Once created, note down the Client ID and Client Secret.
Step 2: Obtain an Authorization Code
Build the Authorization URL:
Construct a URL to redirect the user to Webex's authorization page. This URL includes your client ID, redirect URI, and requested scopes.
javascript
const authUrl = 'https://webexapis.com/v1/authorize';
const clientId = 'YOUR_CLIENT_ID';
const redirectUri = 'YOUR_REDIRECT_URI';
const scopes = 'spark:all'; // Adjust scopes as needed

const authorizationUrl = `${authUrl}?response_type=code&client_id=${encodeURIComponent(clientId)}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}&state=random_state_string`;

Redirect the User:
Direct the user to the constructed authorization URL. They will log in and authorize your app to access their Webex data.
Capture the Authorization Code:
After the user authorizes the app, they are redirected to your specified redirect URI with an authorization code in the query string.
javascript
// Example: http://your_redirect_uri?code=AUTHORIZATION_CODE&state=random_state_string

Step 3: Exchange the Authorization Code for an Access Token
Make a POST Request:
Use the authorization code to request an access token from Webex.
python
import requests

token_url = 'https://webexapis.com/v1/access_token'
client_id = 'YOUR_CLIENT_ID'
client_secret = 'YOUR_CLIENT_SECRET'
redirect_uri = 'YOUR_REDIRECT_URI'
code = 'AUTHORIZATION_CODE'  # The code received from the redirect

payload = {
    'grant_type': 'authorization_code',
    'client_id': client_id,
    'client_secret': client_secret,
    'code': code,
    'redirect_uri': redirect_uri
}

response = requests.post(token_url, data=payload)
token_data = response.json()
access_token = token_data['access_token']

Handle the Response:
The response will include the access token, which you can use to authenticate API requests to Webex on behalf of the user.
Important Considerations
Security: Keep your client secret secure. Do not expose it in client-side code.
Scopes: Only request the scopes necessary for your application.
State Parameter: Use the state parameter to prevent cross-site request forgery (CSRF) attacks.
Token Expiry: Access tokens are temporary. Use the refresh token provided in the response to obtain a new access token when needed.
By following these steps, you can successfully generate a Webex access token using the OAuth 2.0 authorization code flow. This allows your application to interact with Webex APIs on behalf of authenticated users.